"use strict";(self.webpackChunk_owlprotocol_web3_redux_docs=self.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[5875],{9613:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=d(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(f,o(o({ref:t},s),{},{components:n})):r.createElement(f,o({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6451:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return u}});var r=n(7813),a=n(7044),i=(n(9496),n(9613)),o=["components"],c={},l=void 0,d={unversionedId:"web3-redux-advanced/sync_middleware",id:"web3-redux-advanced/sync_middleware",title:"sync_middleware",description:"Sync Middleware",source:"@site/docs/web3-redux-advanced/sync_middleware.md",sourceDirName:"web3-redux-advanced",slug:"/web3-redux-advanced/sync_middleware",permalink:"/docs/web3-redux-advanced/sync_middleware",editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-advanced/sync_middleware.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"sync_contract_call",permalink:"/docs/web3-redux-advanced/sync_contract_call"},next:{title:"Contributing",permalink:"/docs/contributing"}},s=[{value:"Sync Middleware",id:"sync-middleware",children:[],level:2}],p={toc:s};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"sync-middleware"},"Sync Middleware"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"web3-redux")," comes with a built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"Sync")," data model which serves as a form of dynamic middleware that can be added, removed, and customized. There are three types of syncs, ",(0,i.kt)("inlineCode",{parentName:"p"},"BlockSync"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"EventSync"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionSync")," which each can trigger actions upon receiving updates to a new block, new event, or new transaction."),(0,i.kt)("p",null,"All three inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseSync")," which defines a set of ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," to dispatch if the ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," predicate matches the update. Sync middleware can be useful when looking to dispatch your own custom Redux action as a result of some blockchain update. They are also used as the building blocks for the Contract Call sync."),(0,i.kt)("b",null,"Block Sync"),(0,i.kt)("p",null,"This middleware listens for ",(0,i.kt)("inlineCode",{parentName:"p"},"Block/CREATE")," actions, and if a block matches its ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," predicate, will dispatch its ",(0,i.kt)("inlineCode",{parentName:"p"},"actions"),". The following example triggers every 5 blocks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"store.dispatch(Sync.create({ id: '1', type: 'Block', filter: (block) => block.number % 5 == 0, actions }));\n")),(0,i.kt)("b",null,"Event Sync"),(0,i.kt)("p",null,"This middleware listens for ",(0,i.kt)("inlineCode",{parentName:"p"},"ContractEvent/CREATE")," actions, and if an event matches its ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," predicate, will dispatch its ",(0,i.kt)("inlineCode",{parentName:"p"},"actions"),". The following example filters for events named ",(0,i.kt)("inlineCode",{parentName:"p"},"Transfer"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"store.dispatch(Sync.create({ id: '1', type: 'Event', filter: (event) => event.name == 'Transfer', actions }));\n")),(0,i.kt)("b",null,"Transaction Sync"),(0,i.kt)("p",null,"This middleware listens for ",(0,i.kt)("inlineCode",{parentName:"p"},"Transaction/CREATE")," actions, and if an event matches its ",(0,i.kt)("inlineCode",{parentName:"p"},"filter")," predicate, will dispatch its ",(0,i.kt)("inlineCode",{parentName:"p"},"actions"),". The following example filters for tranaction from a particular sender:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"store.dispatch(Sync.create({ id: '1', type: 'Transaction', filter: (tx) => tx.from == address, actions }));\n")))}u.isMDXComponent=!0}}]);