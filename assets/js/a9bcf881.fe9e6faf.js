"use strict";(self.webpackChunk_owlprotocol_web3_redux_docs=self.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[5280],{9613:function(e,t,n){n.d(t,{Zo:function(){return i},kt:function(){return m}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},i=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},i),{},{components:n})):r.createElement(f,s({ref:t},i))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},226:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return i},default:function(){return d}});var r=n(7813),a=n(7044),o=(n(9496),n(9613)),s=["components"],c={},l=void 0,u={unversionedId:"web3-redux-hooks/index",id:"web3-redux-hooks/index",title:"index",description:"Hooks",source:"@site/docs/web3-redux-hooks/index.md",sourceDirName:"web3-redux-hooks",slug:"/web3-redux-hooks/",permalink:"/docs/web3-redux-hooks/",editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-hooks/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Conclusion",permalink:"/docs/web3-redux-quickstart/conclusion"},next:{title:"infura",permalink:"/docs/web3-redux-integrations/infura"}},i=[{value:"Hooks",id:"hooks",children:[],level:2}],p={toc:i};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"hooks"},"Hooks"),(0,o.kt)("p",null,"To easily read/sync data, we recommend using the built-in hooks when possible to automatically combine selectors & action dispatchers."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"EVM Blockchain")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Block#useBlock"},"useBlock"),": Fetch specific block."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Network#useLatestBlock"},"useLatestBlock"),": Fetch latest block (TBD currently just fetches latest block in store and does not query network)."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Block#useBlockSync"},"useBlockSync"),": Subscribe to new blocks."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Transaction#useTransaction"},"useTransaction"),": Fetch specific transaction.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Smart Contracts / Externally Owned Accounts")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useGetBalance"},"useGetBalance"),": Get balance of address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useGetNonce"},"useGetNonce"),": Get nonce (tx count) of address."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useGetCode"},"useGetCode"),": Get code of address. ",(0,o.kt)("inlineCode",{parentName:"li"},"0x")," indicates an EOA."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useContractCall"},"useContractCall"),": Make a contract call."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useEvents"},"useEvents"),": Get past or sync contract event logs."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useSupportsInterface"},"useSupportsInterface"),": Check if contract supports interface using ERC165."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useERC20"},"useERC20"),": Common ERC20 contract calls and events."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useERC721"},"useERC721"),": Common ERC721 contract calls and events."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useERC1155"},"useERC1155"),": Common ERC1155 contract calls and events.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"IPFS")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Ipfs#useIpfs"},"useIpfs"),": Fetch IPFS resource using content hash.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Etherscan API")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useFetchAbi"},"useFetchAbi"),": Fetch contract ABI using Etherscan API."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/Contract#useFetchTransaction"},"useFetchTransactions"),": Fetch transactions for address using Etherscan API.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Experimental")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/ContractEvent#useGetPastLogs"},"useGetPastLogs"),": Fetch past logs using raw subscribe filter. Enables syncing event across multiple smart contracts efficiently. (TBD)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/web3-redux-reference/namespaces/ContractEvent#useGetAssets"},"useGetAssets"),": Fetch all ERC20/ERC721/ERC1155 ",(0,o.kt)("inlineCode",{parentName:"li"},"Transfer")," events associated with an ",(0,o.kt)("inlineCode",{parentName:"li"},"address")," to get a theoretical subset of all assets that ",(0,o.kt)("inlineCode",{parentName:"li"},"address")," potentially owns. Not guaranteed to work with non-interface compliant assets but offers an alternative to off-chain indexing. ",(0,o.kt)("strong",{parentName:"li"},"(TBD)"))))}d.isMDXComponent=!0}}]);