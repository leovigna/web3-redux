"use strict";(globalThis.webpackChunk_owlprotocol_web3_redux_docs=globalThis.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[5250],{7522:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(9901);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},84:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(2875),a=(n(9901),n(7522));const o={},i="Web3 Redux",s={unversionedId:"web3-redux-contributing/web3-redux",id:"web3-redux-contributing/web3-redux",title:"Web3 Redux",description:"This is the main Redux library that is meant to abstract state management regardless of the used UI Framework.",source:"@site/docs/web3-redux-contributing/1_web3-redux.md",sourceDirName:"web3-redux-contributing",slug:"/web3-redux-contributing/web3-redux",permalink:"/web3-redux/docs/web3-redux-contributing/web3-redux",draft:!1,editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-contributing/1_web3-redux.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/web3-redux/docs/web3-redux-contributing/"},next:{title:"Web3 Redux Components",permalink:"/web3-redux/docs/web3-redux-contributing/web3-redux-components"}},l={},c=[{value:"Build",id:"build",level:2},{value:"Project Layout",id:"project-layout",level:2},{value:"Data Models",id:"data-models",level:3},{value:"Test",id:"test",level:2}],u={toc:c};function d({components:e,...t}){return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"web3-redux"},"Web3 Redux"),(0,a.kt)("p",null,"This is the main Redux library that is meant to abstract state management regardless of the used UI Framework."),(0,a.kt)("h2",{id:"build"},"Build"),(0,a.kt)("p",null,"The project is built in Typescript and is transpiled to JS using ",(0,a.kt)("a",{parentName:"p",href:"https://esbuild.github.io/"},"esbuild"),". When developing we recommend building in watch mode which you can do using the command below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd packages/web3-redux\nnpm run build:watch\n")),(0,a.kt)("h2",{id:"project-layout"},"Project Layout"),(0,a.kt)("p",null,"At the top level of our ",(0,a.kt)("inlineCode",{parentName:"p"},"packages/web3-redux/src/")," folder we have the following directory structure. You'll notice these are mostly organized by data model, where each folder contains all the logic to process a specific type of blockchain data or API data.\nSome important folders include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"crud/createCRUDModel.ts"),": General CRUD model factory function, this is the base for all data models for generic ",(0,a.kt)("inlineCode",{parentName:"li"},"CREATE"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"READ"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"UPDATE"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"DELETE")," operations. Creates basic actions, sagas, hooks, and selectors used by all data models."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"db.ts"),": Dexie.js IndexedDB persistent state"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"orm.ts"),": Redux-Orm in-memory state"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"store.ts"),": Redux store combing reducers, sagas, and other middleware")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udce6contracts\n \u2523 \ud83d\udcdcall.sol    #Export relevant OpenZeppelin contracts (ERC20,ERC721,ERC1155,ERC165)\n\ud83d\udce6src\n \u2523 \ud83d\udcc24byte      #4byte.directory API store sha-256 pre-images for events/function calls\n \u2523 \ud83d\udcc2abis       #Import for artifacts & typechain types\n \u2523 \ud83d\udcc2artifacts  #(generated) Artifacts for common contracts (ERC20,ERC721,ERC1155,ERC165)\n \u2523 \ud83d\udcc2block      #Ethereum Block\n \u2523 \ud83d\udcc2config     #Global Config (current account, IPFS url)\n \u2523 \ud83d\udcc2contract   #Smart Contract or Externally Owned Account with an Ethereum address\n \u2523 \ud83d\udcc2contractevent  #Smart Contract event log\n \u2523 \ud83d\udcc2contracteventquery #Cache event log queries across block ranges\n \u2523 \ud83d\udcc2contractsend   #Smart Contract send signed transaction\n \u2523 \ud83d\udcc2contractsend   #Generic CRUD Model\n \u2523 \ud83d\udcc2error      #Store Redux Errors\n \u2523 \ud83d\udcc2ethcall    #Ethereum Call\n \u2523 \ud83d\udcc2ipfs       #IPFS read/write\n \u2523 \ud83d\udcc2network    #Network configs, store web3 instance\n \u2523 \ud83d\udcc2sync       #Dynamic Sync middleware. Quickly add logic to dispatch actions if a new Block/Event/Transaction matching filter parameters is detected.\n \u2523 \ud83d\udcc2test       #Test data\n    \u2517\ud83d\udcdcmochaHooks.ts    #Mocha hooks beforeAll, afterAll\n \u2523 \ud83d\udcc2transaction    #Ethereum Transaction\n \u2523 \ud83d\udcc2typechain  #(generated) Typechain types for common contracts (ERC20,ERC721,ERC1155,ERC165)\n \u2523 \ud83d\udcc2types      #Typescript type annotations\n \u2523 \ud83d\udcc2utils      #Utility functions\n \u2523 \ud83d\udcdcdb.ts      #Dexie.js IndexedDB persistent state\n \u2523 \ud83d\udcdcenvironment.ts     #Environment variables and their defaults\n \u2523 \ud83d\udcdcindex.ts   #Root export all modules\n \u2523 \ud83d\udcdcorm.ts     #Redux-Orm in-memory state\n \u2523 \ud83d\udcdcreducer.ts #Root reducer, dispatches reducer actions to corresponding model reducers\n \u2523 \ud83d\udcdcsaga.ts    #Root saga, spawns model root sagas\n \u2523 \ud83d\udcdcstate.ts   #redux-orm state interface, used for certain tests and give a high-level overview of the Redux store since redux-orm does not have tyypes\n \u2517 \ud83d\udcdcstore.ts   #default redux store and redux store factory functions, compose with custom reducers to integrate web3-redux to existing store\n")),(0,a.kt)("h3",{id:"data-models"},"Data Models"),(0,a.kt)("p",null,"Most of the model directories (block, transaction, contract...) then have the following structure:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\ud83d\udce6<model>\n \u2523 \ud83d\udcc2actions    #Custom Redux actions\n \u2523 \ud83d\udcc2hooks      #Custom React hooks\n \u2523 \ud83d\udcc2middleware #Redux middleware\n \u2523 \ud83d\udcc2model      #Define the model interface and any other utilities such as validation\n    \u2523\ud83d\udcdcinterface.ts #Define model interface, Dexie indices\n    \u2523\ud83d\udcdcorm.ts       #Define Redux-ORM Class\n    \u2517\ud83d\udcdcvalidate.ts  #Define validation logic (sometimes included in interface.ts)\n \u2523 \ud83d\udcc2sagas      #Custom Sagas (eg. RPC requests)\n \u2523 \ud83d\udcc2selectors  #Custom Redux selectors\n \u2523 \ud83d\udcdccrud.ts    #Basic CRUD model created using factory createCRUDModel()\n \u2517 \ud83d\udcdcindex.ts   #Export all modules (actions, sagas, hooks, selectors)\n")),(0,a.kt)("h2",{id:"test"},"Test"),(0,a.kt)("p",null,"We use the following libraries for testing:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://mochajs.org/"},"mocha")," As a testing framework. Our ",(0,a.kt)("inlineCode",{parentName:"li"},".mocharc.json")," file is configured to run tests in parallel on 8 processes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.chaijs.com/"},"chai")," As an test assertion library")),(0,a.kt)("p",null,"Common actions in the ",(0,a.kt)("inlineCode",{parentName:"p"},"before()")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach()")," step of test suites include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Setting up the store"),(0,a.kt)("li",{parentName:"ul"},"Dispatching actions to the store to populate with test data (eg. Configure Network)"),(0,a.kt)("li",{parentName:"ul"},"Setting up a ",(0,a.kt)("inlineCode",{parentName:"li"},"ganache-core")," test Web3 provider (test blockchain)"),(0,a.kt)("li",{parentName:"ul"},"Deploying test smart contracts (eg. Deploy ERC20 contract)")),(0,a.kt)("p",null,"When running tests we recommend the following best practices:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Run individual test files with ",(0,a.kt)("inlineCode",{parentName:"li"},"mocha lib/<path-to-file>")),(0,a.kt)("li",{parentName:"ul"},"Run tests with event logging middleware ",(0,a.kt)("inlineCode",{parentName:"li"},"LOG_REDUX_ACTIONS=1 mocha lib/<path-to-file>")),(0,a.kt)("li",{parentName:"ul"},"If a test files contains many unit tests consider temporarily skipping sum by refactoring them to use ",(0,a.kt)("inlineCode",{parentName:"li"},"it.skip('MyTest, () => ...)"),". Mocha will the test description but won't execute the test.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Testing Hooks"),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"web3-redux")," supports React hooks to simplify integration with React components. These are ",(0,a.kt)("strong",{parentName:"p"},"NOT")," required however, and other non-React projects can still integrate all of the other Redux-based features for state management (actions, sagas, selectors).\nTesting React Hooks requires introducing additional libraries to simulate the DOM and how hooks update:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/rstacruz/mocha-jsdom"},"mocha-jsdom")," to quickly configure JSDOM with Mocha."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://react-hooks-testing-library.com/"},"@testing-library/react-hooks")," to test render hooks")))}d.isMDXComponent=!0}}]);