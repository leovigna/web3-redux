"use strict";(self.webpackChunk_owlprotocol_web3_redux_docs=self.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[4432],{9613:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return f}});var n=r(9496);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(r),f=a,m=p["".concat(s,".").concat(f)]||p[f]||l[f]||o;return r?n.createElement(m,c(c({ref:t},d),{},{components:r})):n.createElement(m,c({ref:t},d))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var u=2;u<o;u++)c[u]=r[u];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5965:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return d},default:function(){return p}});var n=r(7813),a=r(7044),o=(r(9496),r(9613)),c=["components"],i={sidebar_position:3,label:"Configure Contract"},s="Configure Contract",u={unversionedId:"web3-redux-quickstart/add_contract",id:"web3-redux-quickstart/add_contract",title:"Configure Contract",description:"Contract",source:"@site/docs/web3-redux-quickstart/add_contract.md",sourceDirName:"web3-redux-quickstart",slug:"/web3-redux-quickstart/add_contract",permalink:"/web3-redux/docs/web3-redux-quickstart/add_contract",editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-quickstart/add_contract.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,label:"Configure Contract"},sidebar:"tutorialSidebar",previous:{title:"Configure Network",permalink:"/web3-redux/docs/web3-redux-quickstart/add_network"},next:{title:"Contract Call",permalink:"/web3-redux/docs/web3-redux-quickstart/contract_call"}},d=[{value:"Contract",id:"contract",children:[],level:2},{value:"Add Contract",id:"add-contract",children:[],level:2}],l={toc:d};function p(e){var t=e.components,r=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"configure-contract"},"Configure Contract"),(0,o.kt)("h2",{id:"contract"},"Contract"),(0,o.kt)("p",null,"The Contract entity is the most used model in Web3-Redux. In Web3-Redux, a contract can be one of:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Externally Owned Account (EOA): This is a simple Ethereum address that can have some balance, send transactions but that does not have any code. Can be used to track Ethereum balance of some address for example."),(0,o.kt)("li",{parentName:"ul"},"Smart Contract: This is a program on the blockchain that stores and executes EVM bytecode. Can be used to track ERC20 token (eg. USDC) balance of some address for example.")),(0,o.kt)("p",null,"Both a stored in the same ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract")," model as they are indexed by ",(0,o.kt)("inlineCode",{parentName:"p"},"networkId-address")," in the store. Note how we do not use the sole address as a EOA or Smart Contract can exist on multiple EVM blockchains with distinct a balance/state."),(0,o.kt)("p",null,"Contracts can be used in multiple ways such as fetching native token balance (ETH), making smart contract calls, or listening for event logs. You must first configure a contract however by setting the following parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"networkId")," (required): The network this contract lives on. Important to configure how data will be fetched."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"address")," (required): The address of this contract."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"abi")," (optional): Required for Smart Contracts to define its interface. EOAs do ",(0,o.kt)("strong",{parentName:"li"},"NOT")," have an abi.")),(0,o.kt)("h2",{id:"add-contract"},"Add Contract"),(0,o.kt)("p",null,"One you've added a network, add a contract by dispatching a ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract.create")," action.\nBelow we've extended the previous example."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"//App.tsx\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Web3 from 'web3';\nimport { Network } from '@owlprotocol/web3-redux';\n\nimport MyContract from '../artifacts/MyContract.json'; //Contract Truffle/Hardhat Artifact\nconst address = process.env.REACT_APP_MY_CONTRACT_ADDRESS; //Contract address\n\nconst App = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(Network.create({ networkId: '1' }));\n        const abi = dispatch(Contract.create({ networkId: '1', address, abi: MyContract.abi }));\n    }, []); //Runs once on app mount\n    //...\n};\n")))}p.isMDXComponent=!0}}]);