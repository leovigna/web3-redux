"use strict";(self.webpackChunk_owlprotocol_web3_redux_docs=self.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[675],{9613:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(n),f=o,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(m,i(i({ref:t},l),{},{components:n})):r.createElement(m,i({ref:t},l))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7571:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return l},default:function(){return p}});var r=n(7813),o=n(7044),a=(n(9496),n(9613)),i=["components"],c={sidebar_position:2.5,label:"Configure Network"},u="Configure Network",s={unversionedId:"web3-redux-quickstart/add_network",id:"web3-redux-quickstart/add_network",title:"Configure Network",description:"Network",source:"@site/docs/web3-redux-quickstart/add_network.md",sourceDirName:"web3-redux-quickstart",slug:"/web3-redux-quickstart/add_network",permalink:"/web3-redux/docs/web3-redux-quickstart/add_network",editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-quickstart/add_network.md",tags:[],version:"current",sidebarPosition:2.5,frontMatter:{sidebar_position:2.5,label:"Configure Network"},sidebar:"tutorialSidebar",previous:{title:"Initialize the Redux Store",permalink:"/web3-redux/docs/web3-redux-quickstart/add_store"},next:{title:"Configure Contract",permalink:"/web3-redux/docs/web3-redux-quickstart/add_contract"}},l=[{value:"Network",id:"network",children:[],level:2},{value:"Env Var Config",id:"env-var-config",children:[],level:2},{value:"React Config",id:"react-config",children:[],level:2},{value:"Non-React Config",id:"non-react-config",children:[],level:2},{value:"Advanced",id:"advanced",children:[],level:2}],d={toc:l};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"configure-network"},"Configure Network"),(0,a.kt)("h2",{id:"network"},"Network"),(0,a.kt)("p",null,"All entities in the Web3-Redux store are indexed by networkId. Web3-Redux let's you sync multiple networks concurrently (eg. sync Mainnet & Ropsten blocks). The ",(0,a.kt)("inlineCode",{parentName:"p"},"Network")," object is meant to store a global ",(0,a.kt)("inlineCode",{parentName:"p"},"web3")," object that is responsible for connecting to the Ethereum RPC."),(0,a.kt)("p",null,"You must first configure a network by adding it to the store and passing it a web3 instance or an Ethereum RPC. We recomend using a websocket (",(0,a.kt)("inlineCode",{parentName:"p"},"wss://"),") connection as this enables more advanced usage such as subscriptions."),(0,a.kt)("h2",{id:"env-var-config"},"Env Var Config"),(0,a.kt)("p",null,"Web3-Redux includes built-in defaults using environment variables to easily configure your store. To enable this, set the ",(0,a.kt)("strong",{parentName:"p"},"one")," of the following envvars in your React App's ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# .env | .env.local\nREACT_APP_INFURA_API_KEY=<PROJECT_ID> #Use Infura RPC for supported networks\nREACT_APP_MAINNET_RPC=ws://localhost:8546       #Set Ethereum Mainnet RPC (networkId: 1)\n")),(0,a.kt)("p",null,"You can configure your network by simply dispatching the following create action:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"store.dispatch(Network.create({ networkId: '1',  /*web3Rpc: 'ws://localhost:8546'*/})\n")),(0,a.kt)("p",null,"Web3-Redux will autoumatically use the envvar configured RPC as a default for supported networks (Ethereum, Testnets, Polygon). For custom networks, you can manually set the ",(0,a.kt)("inlineCode",{parentName:"p"},"web3Rpc")," parameter in the create action."),(0,a.kt)("p",null,"For more details on supported envvars (additional default networks), check out ",(0,a.kt)("a",{parentName:"p",href:"#"},"Reference/Environment"),".\nAlso see the React Documentation on ",(0,a.kt)("a",{parentName:"p",href:"https://create-react-app.dev/docs/adding-custom-environment-variables/"},"Adding Custom Environment Variables"),"."),(0,a.kt)("h2",{id:"react-config"},"React Config"),(0,a.kt)("p",null,"If using React, you will want to configure the network(s) on app mount with a ",(0,a.kt)("inlineCode",{parentName:"p"},"useEffect")," hook. Note that the component must be have access to the Redux context (see ",(0,a.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-quickstart/add_store"},"Configure Store"),")."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"//App.tsx\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Web3 from 'web3';\nimport { Network } from '@owlprotocol/web3-redux';\n\nconst App = () => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(Network.create({ networkId: '1' }));\n    }, []); //Runs once on app mount\n    //...\n};\n")),(0,a.kt)("h2",{id:"non-react-config"},"Non-React Config"),(0,a.kt)("p",null,"In pure Redux, the configuration can be set as seen below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Network } from '@leovigna/web3-redux';\nstore.dispatch(Network.create({ networkId: '1', web3Rpc: 'ws://localhost:8546' }));\n")),(0,a.kt)("h2",{id:"advanced"},"Advanced"),(0,a.kt)("p",null,"For more dynamic configuration such as integration with Metamask, and setting up a dual configuration with a ",(0,a.kt)("inlineCode",{parentName:"p"},"web3Sender")," object, check out ",(0,a.kt)("a",{parentName:"p",href:"#"},"Integrations/Metamask"),"."))}p.isMDXComponent=!0}}]);