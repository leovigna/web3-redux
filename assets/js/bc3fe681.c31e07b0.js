"use strict";(self.webpackChunk_owlprotocol_web3_redux_docs=self.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[6042],{9613:function(e,r,t){t.d(r,{Zo:function(){return l},kt:function(){return b}});var n=t(9496);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function c(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?c(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},c=Object.keys(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)t=c[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=n.createContext({}),u=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},l=function(e){var r=u(e.components);return n.createElement(s.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(t),b=o,f=d["".concat(s,".").concat(b)]||d[b]||p[b]||c;return t?n.createElement(f,a(a({ref:r},l),{},{components:t})):n.createElement(f,a({ref:r},l))}));function b(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=d;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<c;u++)a[u]=t[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},527:function(e,r,t){t.r(r),t.d(r,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return l},default:function(){return d}});var n=t(7813),o=t(7044),c=(t(9496),t(9613)),a=["components"],i={},s=void 0,u={unversionedId:"web3-redux-advanced/block_subscribe",id:"web3-redux-advanced/block_subscribe",title:"block_subscribe",description:"Block subscription",source:"@site/docs/web3-redux-advanced/block_subscribe.md",sourceDirName:"web3-redux-advanced",slug:"/web3-redux-advanced/block_subscribe",permalink:"/web3-redux/docs/web3-redux-advanced/block_subscribe",editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-advanced/block_subscribe.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"architecture",permalink:"/web3-redux/docs/web3-redux-advanced/architecture"},next:{title:"multichsin",permalink:"/web3-redux/docs/web3-redux-advanced/multichsin"}},l=[{value:"Block subscription",id:"block-subscription",children:[],level:3}],p={toc:l};function d(e){var r=e.components,t=(0,o.Z)(e,a);return(0,c.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,c.kt)("h3",{id:"block-subscription"},"Block subscription"),(0,c.kt)("p",null,"To sync with on-chain events, it's a good idea to start a block subscription as it can be used as a reference point to keep data fresh. This is recommended but not required as some apps might use a different refresh mechanism.\nThe ",(0,c.kt)("inlineCode",{parentName:"p"},"web3-redux")," block subscription hook is configured to automatically start/stop the correct subscription if the ",(0,c.kt)("inlineCode",{parentName:"p"},"networkId")," parameter changes. Alternatively, you can use the ",(0,c.kt)("inlineCode",{parentName:"p"},"subscribe()/unsubscribe()")," handlers for more granular control such as handling user interactions."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"//Blocks.tsx\nimport { Block } from '@leovigna/web3-redux';\nconst BlocksComponent = ({ networkId }) => {\n    const [blocks, { subscribe, unsubsribe }] = Block.useBlockSync(networkId);\n};\n")),(0,c.kt)("p",null,"Alternatively, if not using hooks or React in general, you can manually dispatch a block sync action and use the selector as follows:"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Block, Network } from '@leovigna/web3-redux';\nstore.dispatch(Block.subscribe({ networkId: '1' }));\nconst blocks = Network.selectBlocks(store.getState());\n")))}d.isMDXComponent=!0}}]);