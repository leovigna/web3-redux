"use strict";(globalThis.webpackChunk_owlprotocol_web3_redux_docs=globalThis.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[6042],{7522:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(9901);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(r),b=o,m=p["".concat(i,".").concat(b)]||p[b]||d[b]||a;return r?n.createElement(m,c(c({ref:t},u),{},{components:r})):n.createElement(m,c({ref:t},u))}));function b(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=p;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6590:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(2875),o=(r(9901),r(7522));const a={},c="Block subscription",s={unversionedId:"web3-redux-advanced/block_subscribe",id:"web3-redux-advanced/block_subscribe",title:"Block subscription",description:"To sync with on-chain events, it's a good idea to start a block subscription as it can be used as a reference point to keep data fresh. This is recommended but not required as some apps might use a different refresh mechanism.",source:"@site/docs/web3-redux-advanced/block_subscribe.md",sourceDirName:"web3-redux-advanced",slug:"/web3-redux-advanced/block_subscribe",permalink:"/web3-redux/docs/web3-redux-advanced/block_subscribe",draft:!1,editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-advanced/block_subscribe.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Batching with Multicall",permalink:"/web3-redux/docs/web3-redux-advanced/batching_multicall"},next:{title:"Raw Event Logs",permalink:"/web3-redux/docs/web3-redux-advanced/raw-eventlog"}},i={},l=[],u={toc:l};function d({components:e,...t}){return(0,o.kt)("wrapper",(0,n.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"block-subscription"},"Block subscription"),(0,o.kt)("p",null,"To sync with on-chain events, it's a good idea to start a block subscription as it can be used as a reference point to keep data fresh. This is recommended but not required as some apps might use a different refresh mechanism.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"web3-redux")," block subscription hook is configured to automatically start/stop the correct subscription if the ",(0,o.kt)("inlineCode",{parentName:"p"},"networkId")," parameter changes. Alternatively, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe()/unsubscribe()")," handlers for more granular control such as handling user interactions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"//Blocks.tsx\nimport { Block } from '@owlprotocol/web3-redux';\nconst BlocksComponent = ({ networkId }) => {\n    const [blocks, { subscribe, unsubsribe }] = Block.useBlockSync(networkId);\n};\n")),(0,o.kt)("p",null,"Alternatively, if not using hooks or React in general, you can manually dispatch a block sync action and use the selector as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Block, Network } from '@owlprotocol/web3-redux';\nstore.dispatch(Block.subscribe({ networkId: '1' }));\nconst blocks = Network.selectBlocks(store.getState());\n")))}d.isMDXComponent=!0}}]);