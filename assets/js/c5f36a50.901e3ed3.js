"use strict";(self.webpackChunk_owlprotocol_web3_redux_docs=self.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[507],{9613:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(9496);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,c(c({ref:t},u),{},{components:n})):r.createElement(f,c({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7170:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=n(7813),a=n(7044),o=(n(9496),n(9613)),c=["components"],l={sidebar_position:4,label:"Contract Call"},i="Contract Call",s={unversionedId:"web3-redux-quickstart/contract_call",id:"web3-redux-quickstart/contract_call",title:"Contract Call",description:"A contract call is read-only RPC request to fetch data from a smart contract. Fetching an ERC20 token balance with balanceOf(address) is a contract call for example.",source:"@site/docs/web3-redux-quickstart/contract_call.md",sourceDirName:"web3-redux-quickstart",slug:"/web3-redux-quickstart/contract_call",permalink:"/docs/web3-redux-quickstart/contract_call",editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-quickstart/contract_call.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,label:"Contract Call"},sidebar:"tutorialSidebar",previous:{title:"Configure Contract",permalink:"/docs/web3-redux-quickstart/add_contract"},next:{title:"Contract Event",permalink:"/docs/web3-redux-quickstart/contract_event"}},u=[{value:"React Hook",id:"react-hook",children:[],level:2},{value:"Plain Redux",id:"plain-redux",children:[],level:2}],d={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"contract-call"},"Contract Call"),(0,o.kt)("p",null,"A contract call is read-only RPC request to fetch data from a smart contract. Fetching an ERC20 token balance with ",(0,o.kt)("inlineCode",{parentName:"p"},"balanceOf(address)")," is a contract call for example."),(0,o.kt)("p",null,"Under the hood, Web3-Redux uses the ",(0,o.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/en/v1.7.0/web3-eth-contract.html#methods-mymethod-call"},"web3.eth.Contract.methods.myMethod.call")," API."),(0,o.kt)("h2",{id:"react-hook"},"React Hook"),(0,o.kt)("p",null,"The easiest way make a contract is using the ",(0,o.kt)("inlineCode",{parentName:"p"},"useContractCall")," hook. This combines dispatching a redux action and using a selector to return the updated result."),(0,o.kt)("p",null,"Here we use ",(0,o.kt)("inlineCode",{parentName:"p"},"once")," as the sync parameter to instruct the hook to dispatch a single eth call. For more info on complex sync strategies, see the sync documentation ",(0,o.kt)("a",{parentName:"p",href:"#"},"TBD")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Contract } from '@leovigna/web3-redux';\nconst ERC20Component = ({ networkId, address, account }) => {\n    //Make contract call\n    const balanceOf = Contract.useContractCall(networkId, address, 'balanceOf', [account]);\n    //...\n};\n")),(0,o.kt)("h2",{id:"plain-redux"},"Plain Redux"),(0,o.kt)("p",null,"Under the hood, the ",(0,o.kt)("inlineCode",{parentName:"p"},"useContractCall")," hook is mainly composed by dispatching a ",(0,o.kt)("inlineCode",{parentName:"p"},"Contract.call")," action and then using the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectContractCall")," selector to read the result from teh state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"//Make contract call\nstore.dispatch(Contract.call({\n    networkId,\n    address,\n    method: 'balanceOf',\n    args: [account],\n}));\nconst balance = Contract.selectContractCall(state, {networkId, address }, 'balanceOf', { args: [account] } ]})\n")))}p.isMDXComponent=!0}}]);