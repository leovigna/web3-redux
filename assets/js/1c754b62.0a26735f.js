"use strict";(globalThis.webpackChunk_owlprotocol_web3_redux_docs=globalThis.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[5875],{7522:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var a=t(9901);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),u=d(t),m=r,y=u["".concat(s,".").concat(m)]||u[m]||p[m]||c;return t?a.createElement(y,o(o({ref:n},l),{},{components:t})):a.createElement(y,o({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,o=new Array(c);o[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var d=2;d<c;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},6536:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>d});var a=t(2875),r=(t(9901),t(7522));const c={sidebar_position:3},o="Sync Middleware",i={unversionedId:"web3-redux-advanced/sync_middleware",id:"web3-redux-advanced/sync_middleware",title:"Sync Middleware",description:"Web3-Redux comes with a built-in Sync ta model which serves as a form of dynamic middleware that can be added, removed, and customized. There are three types of syncs, BlockSync, EventSync, and TransactionSync which each can trigger actions upon receiving updates to a new block, new event, or new transaction.",source:"@site/docs/web3-redux-advanced/sync_middleware.md",sourceDirName:"web3-redux-advanced",slug:"/web3-redux-advanced/sync_middleware",permalink:"/web3-redux/docs/web3-redux-advanced/sync_middleware",draft:!1,editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-advanced/sync_middleware.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/web3-redux/docs/web3-redux-advanced/architecture"},next:{title:"Contract Call Sync",permalink:"/web3-redux/docs/web3-redux-advanced/sync_contract_call"}},s={},d=[{value:"Base Sync",id:"base-sync",level:2},{value:"Bock Sync",id:"bock-sync",level:2},{value:"Event Sync",id:"event-sync",level:2},{value:"Transaction Sync",id:"transaction-sync",level:2},{value:"Sync",id:"sync",level:2}],l={toc:d};function p({components:e,...n}){return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sync-middleware"},"Sync Middleware"),(0,r.kt)("p",null,"Web3-Redux comes with a built-in Sync ta model which serves as a form of dynamic middleware that can be added, removed, and customized. There are three types of syncs, ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/interfaces/Sync.BlockSync"},"BlockSync"),", ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/interfaces/Sync.EventSync"},"EventSync"),", and ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/interfaces/Sync.TransactionSync"},"TransactionSync")," which each can trigger actions upon receiving updates to a new block, new event, or new transaction."),(0,r.kt)("p",null,"Sync middleware can be useful when looking to dispatch your own custom Redux action as a result of some blockchain update. They are also used as the building blocks for the Contract Call sync."),(0,r.kt)("h2",{id:"base-sync"},"Base Sync"),(0,r.kt)("p",null,"All sync middleware shares the following parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"id"),": This must be a unique id that defines the middleware and can be used to remove it in the future."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"actions"),": These actions are dispatched whenever the sync middleware is triggered.")),(0,r.kt)("h2",{id:"bock-sync"},"Bock Sync"),(0,r.kt)("p",null,"This middleware listens for ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/namespaces/Block#create"},"Block/CREATE")," actions, and if ",(0,r.kt)("inlineCode",{parentName:"p"},"block.number % matchBlockNumberModulo == 0"),", it will dispatch its ",(0,r.kt)("inlineCode",{parentName:"p"},"actions"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"matchBlockNumberModulo")," value of ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," would imply dispatching on every block."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"Sync.create({ id: '1', type: 'Block', matchBlockNumberModulo: 1, actions });\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reference:")," ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/interfaces/Sync.BlockSync"},"BlockSync")),(0,r.kt)("h2",{id:"event-sync"},"Event Sync"),(0,r.kt)("p",null,"This middleware listens for ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/namespaces/ContractEvent#create"},"ContractEvent/CREATE")," actions, and if an event matches its ",(0,r.kt)("inlineCode",{parentName:"p"},"matchAddress"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"matchName"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"matchReturnValues"),", will dispatch its ",(0,r.kt)("inlineCode",{parentName:"p"},"actions"),".\nThe following example filters for ",(0,r.kt)("inlineCode",{parentName:"p"},"Transfer")," events:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"Sync.create({ id: '1', type: 'Event', matchAddress: address, matchName: 'Transfer', actions });\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"An event sync middleware is ",(0,r.kt)("strong",{parentName:"p"},"NOT")," the same as an event subscription. Sync middleware simply watches the local redux store and dispatches additional actions. This does not create a new Web3 subscription.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reference:")," ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/interfaces/Sync.EventSync"},"EventSync")),(0,r.kt)("h2",{id:"transaction-sync"},"Transaction Sync"),(0,r.kt)("p",null,"This middleware listens for ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/namespaces/Transaction#create"},"Transaction/CREATE")," actions, and if an transaction matches its ",(0,r.kt)("inlineCode",{parentName:"p"},"matchFrom")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"matchTo")," parameteres, will dispatch its ",(0,r.kt)("inlineCode",{parentName:"p"},"actions"),".\nThe following example filters for tranaction from a particular sender:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"Sync.create({ id: '1', type: 'Transaction', matchFrom: account, actions }));\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reference:")," ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/interfaces/Sync.TransactionSync"},"TransactionSync")),(0,r.kt)("h2",{id:"sync"},"Sync"),(0,r.kt)("p",null,"Type union of Block/Event/Transaction Syncs."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Reference:")," ",(0,r.kt)("a",{parentName:"p",href:"/web3-redux/docs/web3-redux-reference/namespaces/Sync#sync"},"Sync")))}p.isMDXComponent=!0}}]);