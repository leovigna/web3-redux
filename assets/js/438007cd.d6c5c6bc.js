"use strict";(self.webpackChunk_owlprotocol_web3_redux_docs=self.webpackChunk_owlprotocol_web3_redux_docs||[]).push([[3496],{9613:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(9496);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,c=function(e,t){if(null==e)return{};var n,r,c={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(c[n]=e[n]);return c}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(c[n]=e[n])}return c}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,c=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=c,y=p["".concat(i,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(y,o(o({ref:t},s),{},{components:n})):r.createElement(y,o({ref:t},s))}));function f(e,t){var n=arguments,c=t&&t.mdxType;if("string"==typeof e||c){var a=n.length,o=new Array(a);o[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:c,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},46:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return s},default:function(){return p}});var r=n(7813),c=n(7044),a=(n(9496),n(9613)),o=["components"],l={},i=void 0,u={unversionedId:"web3-redux-advanced/sync_contract_call",id:"web3-redux-advanced/sync_contract_call",title:"sync_contract_call",description:"Contract Call Sync",source:"@site/docs/web3-redux-advanced/sync_contract_call.md",sourceDirName:"web3-redux-advanced",slug:"/web3-redux-advanced/sync_contract_call",permalink:"/docs/web3-redux-advanced/sync_contract_call",editUrl:"https://github.com/owlprotocol/web3-redux/tree/master/docusaurus/docs/web3-redux-advanced/sync_contract_call.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"persistence",permalink:"/docs/web3-redux-advanced/persistence"},next:{title:"sync_middleware",permalink:"/docs/web3-redux-advanced/sync_middleware"}},s=[{value:"Contract Call Sync",id:"contract-call-sync",children:[],level:2}],d={toc:s};function p(e){var t=e.components,n=(0,c.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"contract-call-sync"},"Contract Call Sync"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"web3-redux")," offers enhanced customizability of contract call syncing to avoid unecessary rpc calls. Contract call syncing is achieved by refreshing contract calls based on a set of parameters. To initiate contract call syncing, one must first dispatch a ContractCallAction."),(0,a.kt)("p",null,"There are 4 types of contract call syncing:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"once"),": Call contract method once"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Block"),": Call contract and refresh every block.\n",(0,a.kt)("inlineCode",{parentName:"li"},"Event"),": (TDB)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Transaction"),": Call contract and refresh every time a block includes a transaction to the contract.")),(0,a.kt)("p",null,"Note: Both block sync and transaction sync require an existing block subscription to be first created."),(0,a.kt)("p",null,"By default we use Transaction syncing. See ",(0,a.kt)("a",{parentName:"p",href:"#custom-contract-call-syncing"},"Advanced/Optimising Contract Call Sync")," for more info."))}p.isMDXComponent=!0}}]);